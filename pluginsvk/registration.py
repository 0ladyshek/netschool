from vkbottle.bot import Message, Blueprint
from sqlighter import SQLighter
from tools import get_uid
from dnevnik import get_school, get_student
from .keyboard import accounts, keyboard_cancel
from .state import NewaccountState
import traceback

db = SQLighter('db.db')
bp = Blueprint('registration')

async def registration(event):
    await bp.api.messages.send(user_id=event.object.user_id, message='üñä–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º(–ü—Ä–∏–º–µ—Ä: https://edu.admoblkaluga.ru/ –ê—Ä–∫–∞–¥–∏–π~–ü–µ—Ç—Ä–æ–≤–∏—á ||4R0–õ—å_–π—Ü–£k3H").\n–ï—Å–ª–∏ –≤ –ª–æ–≥–∏–Ω–µ –∏–ª–∏ –ø–∞—Ä–æ–ª–µ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, —Ç–æ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö  –Ω–∞ ~', keyboard = keyboard_cancel, random_id=0)
    await bp.state_dispenser.set(event.object.user_id, NewaccountState.INLOGIN)

@bp.on.private_message(state=NewaccountState.INLOGIN)
async def _(message: Message):
    logindata = message.text.split(' ')
    if logindata:
        try:
            schools = await get_school(logindata[0])
            await message.answer('üìã–í–≤–µ–¥–∏ ID —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ(ID - –®–∫–æ–ª–∞)')
            text = ''
            for school in schools:
                text += f"\n{school['id']} - {school['name']}"
            if len(text) > 4096:
                for x in range(0, len(text), 4096):
                    await message.answer(text[x:x+4096])
                await message.answer('‚úÖ–í—Å—ë!')
            else:
                await message.answer(text)
            await bp.state_dispenser.set(message.peer_id, NewaccountState.INSCHOOL, logindata=logindata)
        except Exception as e:
            print(traceback.print_exc())
            await message.answer(f'‚ùå–û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [id350673924|—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É]')
    else:
        await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑', keyboard = keyboard_cancel)

@bp.on.private_message(state=NewaccountState.INSCHOOL)
async def _(message: Message):
    logindata = message.state_peer.payload["logindata"]
    try:
        student = await get_student(logindata[0], logindata[1], logindata[2], int(message.text))
        db.add_account_id(get_uid(message.from_id), student['studentId'])
        db.add_account(student['studentId'], logindata[0], logindata[1], logindata[2], int(message.text))
        keyboard = await accounts(get_uid(message.from_id))
        await bp.state_dispenser.delete(message.from_id)
        await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ!–ê —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏ –≤ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç', keyboard = keyboard)
    except Exception as error:
        await message.answer(f'‚ùå–û—à–∏–±–∫–∞: {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')