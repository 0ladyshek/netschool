from aiogram import Dispatcher, types, executor
from aiogram.bot import Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import ChatTypeFilter, Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from sqlighter import SQLighter
import logging
import datetime
from dnevnik import *
from pluginstg.keyboard import *
from pluginstg.state import *
import os
import re
from apscheduler.schedulers.asyncio import AsyncIOScheduler

scheduler = AsyncIOScheduler()
db = SQLighter('db.db')
bot = Bot(token='')
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)
yes, no = '‚úÖ', '‚ùå'

#####–ö–æ–º–∞–Ω–¥—ã#####

@dp.message_handler(commands=['start'], state="*")
async def _(message: types.Message):
	if not db.user_exists(user_id=message.from_user.id):
		db.add_user(message.from_user.id)
	keyboard = await keyboard_accounts(message.from_user.id)
	await message.reply('üìú–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π', reply_markup = keyboard)
	await Start.menu.set()

@dp.message_handler(ChatTypeFilter('private'), commands=['connect'], state="*")
async def _(message: types.Message):
	account = db.get_account_id(message.from_user.id)
	if account:
		await message.answer(f'üîó–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: /connect {account}\nüìç–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫ –±–µ—Å–µ–¥–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç(—á—Ç–æ–±—ã –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –±–µ—Å–µ–¥—ã, —Ç–æ—Ç –∫—Ç–æ –µ–≥–æ –ø—Ä–∏–≤—è–∑–∞–ª –∏–ª–∏ –∞–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å /disconnect)')
	else:
		await message.answer('‚ùå–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ!')

#####–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏#####

@dp.message_handler(text='üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', state="*")
async def _(message: types.Message):
	await message.answer('üóì–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup = keyboard_date)
	await Dnevnik.rasp.set()

@dp.message_handler(text='üìì–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', state="*")
async def _(message: types.Message):
	await message.answer('üóì–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup = keyboard_date)
	await Dnevnik.home_work.set()

@dp.message_handler(text='üóí–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', state="*")
async def _(message: types.Message):
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await get_overdue(account[1], account[2], account[3], account[4])
	resulttext= 'üóí–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n'
	for assignment in result:
		resulttext += f"{assignment['subjectName']}: {assignment['assignmentName']}(–î–∞—Ç–∞ —Å–¥–∞—á–∏: {re.search('(.*)T00:00:00', assignment['dueDate']).group(1)})\n"
	await message.answer(resulttext)

@dp.message_handler(text='üìå–û–±—ä—è–≤–ª–µ–Ω–∏—è', state="*")
async def _(message: types.Message):
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result, files = await get_announcements(account[1], account[2], account[3], account[4])
	if not result:
		await message.answer('‚ùå–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π!')
		return
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.answer(result[x:x+4096])
		await message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.answer(result)
	if files:
		await message.answer('üì©–í–ª–æ–∂–µ–Ω–∏—è –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:')
		for file in files:
			await message.answer_document(document = file['file'], caption = file['name'])

@dp.message_handler(text='1Ô∏è‚É£–û—Ü–µ–Ω–∫–∏', state="*")
async def _(message: types.Message):
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await get_marks(account[1], account[2], account[3], account[4])
	await message.answer(result, reply_markup = keyboard_marks)

@dp.message_handler(text='üéâ–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', state="*")
async def _(message: types.Message):
	await message.answer('üìú–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å', reply_markup = keyboard_birth)

@dp.message_handler(text='üôÖ‚Äç‚ôÇÔ∏è–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', state="*")
async def _(message: types.Message):
	await message.answer('‚ö†Ô∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –í—ã –≤ –∑–¥—Ä–∞–≤–æ–º —É–º–µ –∏ —Å–≤–µ—Ç–ª–æ–π –ø–∞–º—è—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup=keyboard_delete)

@dp.message_handler(text='üìã–í—ã—Ö–æ–¥', state="*")
async def _(message: types.Message):
	db.edit_account_id(0, message.from_user.id)
	await message.answer('‚úÖ–í—Å–µ!', reply_markup=ReplyKeyboardRemove())
	keyboard = await keyboard_accounts(message.from_user.id)
	await message.answer('üìú–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π', reply_markup = keyboard)
	await Start.menu.set()

@dp.message_handler(text='‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', state="*")
async def _(message: types.Message):
	await message.answer('üî∂–°–æ–∑–¥–∞—Ç–µ–ª—å: @oladushik\n\n–ë–æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/netschoolbot', reply_markup=keyboard_info)

@dp.message_handler(text='‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', state='*')
async def _(message: types.Message):
	notificationNewMarks = db.get_notification_settings(message.from_user.id)
	await message.answer(f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\nüõé–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {yes if notificationNewMarks else no}', reply_markup=keyboard_settings)

@dp.message_handler(text='‚≠ïÔ∏è–û—Å—Ç–∞–ª—å–Ω–æ–µ', state="*")
async def _(message: types.Message):
	await message.answer('‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n‚ò¢Ô∏è–§–ª—É–¥ –ª–æ–≥–∏–Ω–æ–º(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫): —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–∞ —Å–∞–π—Ç–µ\n‚ûï–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ü–µ–Ω–æ–∫: –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –æ—Ü–µ–Ω–æ–∫ –Ω—É–∂–Ω–æ –¥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞', reply_markup=keyboard_other)

@dp.message_handler(text='üéà–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', state="*")
async def _(message: types.Message):
	await message.answer('üñä–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏', reply_markup=keyboard_holiday)

@dp.message_handler(text='üìÑ–û—Ç—á—ë—Ç—ã', state='*')
async def _(message: types.Message):
	await message.answer('‚òùÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç', reply_markup=keyboard_report)

##### –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ #####

@dp.callback_query_handler(text='birthStaff', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await birthDays(account[1], account[2], account[3], account[4], staff=True)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='birthStudent', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await birthDays(account[1], account[2], account[3], account[4], student=True)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='birthParrent', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await birthDays(account[1], account[2], account[3], account[4], parent=True)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='birthYear', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await birthYears(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å–µ!') 
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='detail_marks', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await get_detail_marks(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='yes_delete', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	db.edit_account_id(0, message.from_user.id)
	db.delete_account(account_id, message.from_user.id)
	await message.message.answer('‚úÖ–í—Å–µ!', reply_markup=ReplyKeyboardRemove())
	keyboard = await keyboard_accounts(message.from_user.id)
	await message.message.answer('üìú–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π', reply_markup = keyboard)
	await Start.menu.set()

@dp.callback_query_handler(text='cancel', state='*')
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	await state.finish()
	await message.message.answer('‚úÖ–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

@dp.callback_query_handler(text='new_profile', state='Start:menu')
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	await message.message.answer('üñä–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º(–ü—Ä–∏–º–µ—Ä: https://edu.admoblkaluga.ru/ –ê—Ä–∫–∞–¥–∏–π~–ü–µ—Ç—Ä–æ–≤–∏—á P4R0–õ—å_–π—Ü–£k3H").\n–ï—Å–ª–∏ –≤ –ª–æ–≥–∏–Ω–µ –∏–ª–∏ –ø–∞—Ä–æ–ª–µ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, —Ç–æ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö  –Ω–∞ ~', reply_markup=keyboard_cancel)
	await Start.next()

@dp.callback_query_handler(state='Start:menu')
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	try:
		account_id = int(message.data)
	except:
		keyboard = await keyboard_accounts(message.from_user.id)
		await message.message.answer('‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º', reply_markup = keyboard)
		return
	if account_id in db.get_account_user(message.from_user.id):
		db.edit_account_id(account_id, message.from_user.id)
		await message.message.answer('üö™–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=keyboard_menu)
		await state.finish()
		return
	keyboard = await keyboard_accounts(message.from_user.id)
	await message.message.answer('‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º', reply_markup = keyboard)

@dp.callback_query_handler(text='infoStudent', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result, photo = await getSettings(account[1], account[2], account[3], account[4])
	await message.message.answer_photo(caption=result, photo = photo.content)

@dp.callback_query_handler(text='infoSchool', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await getSchool(account[1], account[4])
	await message.message.answer(result)

@dp.callback_query_handler(text='infoSessions', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await getSessions(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='notificationNewMarks', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	notification = db.get_notification_settings(message.from_user.id)
	notification = 1 if not notification else 0
	db.edit_notify(message.from_user.id, notification)
	await message.message.answer(f'‚úÖ–£—Å—Ç–∞–Ω–æ–≤–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ: {yes if bool(notification) else no}')

@dp.callback_query_handler(text='flood_login', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	await message.message.answer('‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ª–æ–≥–∏–Ω–æ–≤', reply_markup=keyboard_cancel)
	await Other.action.set()

@dp.callback_query_handler(text='calc_marks', state='*')
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	subjects = await getSubjects(account[1], account[2], account[3], account[4])
	keyboard = await keyboard_subjects(subjects)
	await message.message.answer("üîç–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫–∏", reply_markup=keyboard)
	await Other.get_subject.set()

@dp.callback_query_handler(state='Other:get_subject')
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	subject = (await getSubjects(account[1], account[2], account[3], account[4]))[int(message.data)]
	marks, average = await getMarkSubject(account[1], account[2], account[3], account[4], subject)
	if not marks:
		await message.message.answer('‚ùå–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É')
		return await state.finish()
	await message.message.answer(f'0Ô∏è‚É£–û—Ü–µ–Ω–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É: {marks}\n‚§¥Ô∏è–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average}\n\n‚ùì–ö–∞–∫—É—é –æ—Ü–µ–Ω–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?', reply_markup=keyboard_marks_subject)
	await state.update_data(marks=marks, average=average)
	await Other.next()

@dp.callback_query_handler(state='Other:get_mark')
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	data = await state.get_data()
	marks = data['marks'].split(' ')
	if int(message.data) <= int(data['average']):
		await message.message.answer('‚ùå–í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
		return await state.finish()
	general_sum = 0
	count_marks = len(marks)
	for mark in marks:
		general_sum += int(mark)
	if int(message.data) == 3:
		count_three_to_two_eight = 0
		general_sum_three_to_three = general_sum
		count_marks_three_to_three = count_marks
		average_three_to_three = round(general_sum / count_marks, 1)
		while average_three_to_three < 2.8:
			count_three_to_two_eight += 1
			count_marks_three_to_three += 1
			general_sum_three_to_three += 3
			average_three_to_three = round(general_sum_three_to_three / count_marks_three_to_three, 1)
			if count_three_to_two_eight > 50:
				average_three_to_three = 2.8
		count_three_to_two_nine = count_three_to_two_eight
		while average_three_to_three < 2.9:
			count_three_to_two_nine += 1
			count_marks_three_to_three += 1
			general_sum_three_to_three += 3
			average_three_to_three = round(general_sum_three_to_three / count_marks_three_to_three, 1)
			if count_three_to_two_nine > 50:
				average_three_to_three = 2.9
		count_three_to_three = count_three_to_two_eight
		while average_three_to_three < 3:
			count_three_to_three += 1
			count_marks_three_to_three += 1
			general_sum_three_to_three += 3
			average_three_to_three = round(general_sum_three_to_three / count_marks_three_to_three, 1)
			if count_three_to_three > 50:
				average_three_to_three = 3
		await message.message.answer(f'üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ–µ–∫:\n–î–æ 2Ô∏è‚É£.8Ô∏è‚É£:{count_three_to_two_eight}\n–î–æ 2Ô∏è‚É£.9Ô∏è‚É£: {count_three_to_two_nine}\n–î–æ 3Ô∏è‚É£: {count_three_to_three}')
		count_for_to_two_eight = 0
		general_sum_for_to_three = general_sum
		count_marks_for_to_three = count_marks
		average_for_to_three = round(general_sum / count_marks, 1)
		while average_for_to_three < 2.8:
			count_for_to_two_eight += 1
			count_marks_for_to_three += 1
			general_sum_for_to_three += 4
			average_for_to_three = round(general_sum_for_to_three / count_marks_for_to_three, 1)
			if count_for_to_two_eight > 50:
				average_for_to_three = 2.8
		count_for_to_two_nine = count_for_to_two_eight
		while average_for_to_three < 2.9:
			count_for_to_two_nine += 1
			count_marks_for_to_three += 1
			general_sum_for_to_three += 4
			average_for_to_three = round(general_sum_for_to_three / count_marks_for_to_three, 1)
			if count_for_two_nine > 50:
				average_three_to_three = 2.9
		count_for_to_three = count_for_to_two_eight
		while average_for_to_three < 3:
			count_for_to_three += 1
			count_marks_for_to_three += 1
			general_sum_for_to_three += 4
			average_for_to_three = round(general_sum_for_to_three / count_marks_for_to_three, 1)
			if count_for_to_three > 50:
				average_three_to_three = 3
		await message.message.answer(f'üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ç–≤–µ—Ä–æ–∫:\n–î–æ 2Ô∏è‚É£.8Ô∏è‚É£:{count_for_to_two_eight}\n–î–æ 2Ô∏è‚É£.9Ô∏è‚É£: {count_for_to_two_nine}\n–î–æ 3Ô∏è‚É£: {count_for_to_three}')
		count_five_to_two_eight = 0
		general_sum_five_to_three = general_sum
		count_marks_five_to_three = count_marks
		average_five_to_three = round(general_sum / count_marks, 1)
		while average_five_to_three < 2.8:
			count_five_to_two_eight += 1
			count_marks_five_to_three += 1
			general_sum_five_to_three += 4
			average_five_to_three = round(general_sum_five_to_three / count_marks_five_to_three, 1)
			if count_five_to_two_eight > 50:
				average_five_to_three = 2.8
		count_five_to_two_nine = count_five_to_two_eight
		while average_five_to_three < 2.9:
			average_five_to_three += 1
			count_marks_five_to_three += 1
			general_sum_five_to_three += 4
			average_five_to_three = round(general_sum_five_to_three / count_marks_five_to_three, 1)
			if average_five_to_three > 50:
				average_five_to_three = 2.9
		count_five_to_three = count_five_to_two_eight
		while average_five_to_three < 3:
			count_five_to_three += 1
			count_marks_five_to_three += 1
			general_sum_five_to_three += 4
			average_five_to_three = round(general_sum_five_to_three / count_marks_five_to_three, 1)
			if count_five_to_three > 50:
				average_three_to_three = 3
		await message.message.answer(f'üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—è—Ç–µ—Ä–æ–∫:\n–î–æ 2Ô∏è‚É£.8Ô∏è‚É£:{count_five_to_two_eight}\n–î–æ 2Ô∏è‚É£.9Ô∏è‚É£: {count_five_to_two_nine}\n–î–æ 3Ô∏è‚É£: {count_five_to_three}')
		return await state.finish()
	if int(message.data) == 4:
		count_for_to_three_eight = 0
		general_sum_for_to_for = general_sum
		count_marks_for_to_for = count_marks
		average_for_to_for = round(general_sum / count_marks, 1)
		while average_for_to_for < 3.8:
			count_for_to_three_eight += 1
			count_marks_for_to_for += 1
			general_sum_for_to_for += 4
			average_for_to_for = round(general_sum_for_to_for / count_marks_for_to_for, 1)
			if count_for_to_three_eight > 50:
				average_for_to_for = 3.8
		count_for_to_three_nine = count_for_to_three_eight
		while average_for_to_for < 3.9:
			count_for_to_three_nine += 1
			count_marks_for_to_for += 1
			general_sum_for_to_for += 4
			average_for_to_for = round(general_sum_for_to_for / count_marks_for_to_for, 1)
			if count_for_to_three_nine > 50:
				average_for_to_for = 3.9
		count_for_to_for = count_for_to_three_nine
		while average_for_to_for < 4:
			count_for_to_for += 1
			count_marks_for_to_for += 1
			general_sum_for_to_for += 4
			average_for_to_for = round(general_sum_for_to_for / count_marks_for_to_for, 1)
			if count_for_to_for > 50:
				average_for_to_for = 3
		await message.message.answer(f'üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ç–≤–µ—Ä–æ–∫:\n–î–æ 3Ô∏è‚É£.8Ô∏è‚É£:{count_for_to_three_eight}\n–î–æ 3Ô∏è‚É£.9Ô∏è‚É£: {count_for_to_three_nine}\n–î–æ 4Ô∏è‚É£: {count_for_to_for}')
		count_five_to_three_eight = 0
		general_sum_five_to_for = general_sum
		count_marks_five_to_for = count_marks
		average_five_to_for = round(general_sum / count_marks, 1)
		while average_five_to_for < 3.8:
			count_five_to_three_eight += 1
			count_marks_five_to_for += 1
			general_sum_five_to_for += 5
			average_five_to_for = round(general_sum_five_to_for / count_marks_five_to_for, 1)
			if count_five_to_three_eight > 50:
				average_five_to_for = 3.8
		count_five_to_three_nine = count_five_to_three_eight
		while average_five_to_for < 3.9:
			count_for_to_two_nine += 1
			count_marks_five_to_for += 1
			general_sum_five_to_for += 5
			average_five_to_for = round(general_sum_five_to_for / count_marks_five_to_for, 1)
			if count_five_to_three_nine > 50:
				average_five_to_for = 3.9
		count_five_to_for = count_five_to_three_nine
		while average_five_to_for < 4:
			count_five_to_for += 1
			count_marks_five_to_for += 1
			general_sum_five_to_for += 4
			average_five_to_for = round(general_sum_five_to_for / count_marks_five_to_for, 1)
			if count_five_to_for > 50:
				average_five_to_for = 4
		await message.message.answer(f'üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—è—Ç–µ—Ä–æ–∫:\n–î–æ 2Ô∏è‚É£.8Ô∏è‚É£:{count_five_to_three_eight}\n–î–æ 2Ô∏è‚É£.9Ô∏è‚É£: {count_five_to_three_nine}\n–î–æ 3Ô∏è‚É£: {count_five_to_for}')
		return await state.finish()
	if int(message.data) == 5:
		count_five_to_for_eight = 0
		general_sum_five_to_five = general_sum
		count_marks_five_to_five = count_marks
		average_five_to_five = round(general_sum / count_marks, 1)
		while average_five_to_five < 4.8:
			count_five_to_for_eight += 1
			count_marks_five_to_five += 1
			general_sum_five_to_five += 5
			average_five_to_five = round(general_sum_five_to_five / count_marks_five_to_five, 1)
			if count_five_to_for_eight > 50:
				average_five_to_five = 4.8
		count_five_to_for_nine = count_five_to_for_eight
		while average_five_to_five < 4.9:
			count_five_to_for_nine += 1
			count_marks_five_to_five += 1
			general_sum_five_to_five += 5
			average_five_to_five = round(general_sum_five_to_five / count_marks_five_to_five, 1)
			if count_five_to_for_nine > 50:
				average_five_to_five = 4.9
		count_five_to_five = count_five_to_for_nine
		while average_five_to_five < 5:
			count_five_to_five += 1
			count_marks_five_to_five += 1
			general_sum_five_to_five += 5
			average_five_to_five = round(general_sum_five_to_five / count_marks_five_to_five, 1)
			if count_five_to_five > 50:
				average_five_to_five = 5
		await message.message.answer(f'üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—è—Ç–µ—Ä–æ–∫:\n–î–æ 4Ô∏è‚É£.8Ô∏è‚É£:{count_five_to_for_eight}\n–î–æ 4Ô∏è‚É£.9Ô∏è‚É£: {count_five_to_for_nine}\n–î–æ 5Ô∏è‚É£: {count_five_to_five}')
		return await state.finish()

@dp.callback_query_handler(text='holiday_month', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await getHoliday(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='holiday_next', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	date = datetime.date.today() + datetime.timedelta(days=31)
	result = await getHoliday(account[1], account[2], account[3], account[4], date)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='holiday_year', state="*")
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await getHolidayYear(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='report_parent', state='*')
async def _(message: types.CallbackQuery):
	await message.answer()
	await message.message.answer('üóì–í—ã–±–µ—Ä–∏ —á–µ—Ç–≤–µ—Ä—Ç—å', reply_markup=keyboard_parent_report)

@dp.callback_query_handler(text=['term_1', 'term_2', 'term_3', 'term_4'], state='*')
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	term = int(message.data.split('_')[1])
	result = await getParentReport(account[1], account[2], account[3], account[4], term)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='report_total', state='*')
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await getTotalReport(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!', reply_markup=keyboard_total_report)
	else:
		await message.message.answer(result, reply_markup=keyboard_total_report)

@dp.callback_query_handler(text='average_mark', state='*')
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	result = await getAverageMark(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

##### –†–∞–±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ #####

@dp.inline_handler(state='Start:schools')
async def _(message: types.InlineQuery, state: FSMContext):
	query_offset = int(message.offset) if message.offset else 0
	logindata = (await state.get_data())['logindata'].split(' ')
	url = logindata[0]
	schools = await get_school(url)
	if message.query:
		school_query = []
		for school in schools:
			if message.query in school['name']:
				print(school['name'])
				school_query.append(school)
		schools = school_query
	result = [types.InlineQueryResultArticle(
        id=item['id'],
        title=item['name'],
        input_message_content=types.InputTextMessageContent(
            message_text=f"{item['id']}",
        ),
    ) for item in schools[query_offset:]]
	if len(result) < 50:
		await message.answer(result, is_personal=True, next_offset="")
	else:
		await message.answer(result[:50], is_personal=True, next_offset=str(query_offset+50))

@dp.message_handler(state='Start:new_account')
async def _(message: types.Message, state: FSMContext):
	await state.update_data(logindata=message.text, page=1)
	await message.answer('üìã–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å —à–∫–æ–ª—É\n–í–≤–µ–¥–∏ ID —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ(ID - –®–∫–æ–ª–∞) –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π')
	url = message.text.split(' ')[0]
	schools = await get_school(url)
	text = ''
	for school in schools:
		text += f"\n{school['id']} - {school['name']}"
	if len(text) > 4096:
		for x in range(0, len(text), 4096):
			await message.answer(text[x:x+4096])
		await message.answer('‚úÖ–í—Å—ë!', reply_markup=keyboard_schools)
	else:
		await message.answer(text, reply_markup=keyboard_schools)
	await Start.next()

@dp.message_handler(state='Start:schools')
async def _(message: types.Message, state: FSMContext):
	logindata = (await state.get_data())['logindata'].split(' ')
	try:
		student = await get_student(logindata[0], logindata[1], logindata[2], int(message.text))
		db.add_account_id(message.from_user.id, student['studentId'])
		db.add_account(student['studentId'], logindata[0], logindata[1], logindata[2], int(message.text))
		keyboard = await keyboard_accounts(message.from_user.id)
		await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ!–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –º–µ–Ω—é', reply_markup=keyboard)
	except Exception as e:
		keyboard = await keyboard_accounts(message.from_user.id)
		await message.answer(f'‚ùå–û—à–∏–±–∫–∞: {e}\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @oladushik', reply_markup=keyboard)
	await Start.menu.set()

##### –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –î–ó #####

@dp.callback_query_handler(text='yesterday', state=["Dnevnik:rasp", "Dnevnik:home_work"])
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	state = await state.get_state()
	start = end = datetime.date.today() + datetime.timedelta(days=-1)
	if state == 'Dnevnik:rasp':
		result = await get_rasp(account[1], account[2], account[3], account[4], start, end)
	elif state == 'Dnevnik:home_work':
		result = await get_dz(account[1], account[2], account[3], account[4], start, end)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='today', state=["Dnevnik:rasp", "Dnevnik:home_work"])
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	state = await state.get_state()
	start = end = datetime.date.today()
	if state == 'Dnevnik:rasp':
		result = await get_rasp(account[1], account[2], account[3], account[4], start, end)
	elif state == 'Dnevnik:home_work':
		result = await get_dz(account[1], account[2], account[3], account[4], start, end)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='tomorrow', state=["Dnevnik:rasp", "Dnevnik:home_work"])
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	state = await state.get_state()
	start = end = datetime.date.today() + datetime.timedelta(days=1)
	if state == 'Dnevnik:rasp':
		result = await get_rasp(account[1], account[2], account[3], account[4], start, end)
	elif state == 'Dnevnik:home_work':
		result = await get_dz(account[1], account[2], account[3], account[4], start, end)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='week', state=["Dnevnik:rasp", "Dnevnik:home_work"])
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	state = await state.get_state()
	start = end = None
	if state == 'Dnevnik:rasp':
		result = await get_rasp(account[1], account[2], account[3], account[4], start, end)
	elif state == 'Dnevnik:home_work':
		result = await get_dz(account[1], account[2], account[3], account[4], start, end)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

@dp.callback_query_handler(text='next_week', state=["Dnevnik:rasp", "Dnevnik:home_work"])
async def _(message: types.CallbackQuery, state: FSMContext):
	await message.answer()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	state = await state.get_state()
	start = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday() - 7)
	end = start + datetime.timedelta(days=5)
	if state == 'Dnevnik:rasp':
		result = await get_rasp(account[1], account[2], account[3], account[4], start, end)
	elif state == 'Dnevnik:home_work':
		result = await get_dz(account[1], account[2], account[3], account[4], start, end)
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await message.message.answer(result[x:x+4096])
		await message.message.answer('‚úÖ–í—Å—ë!')
	else:
		await message.message.answer(result)

##### –†–∞–±–æ—Ç–∞ –≤ –±–µ—Å–µ–¥–∞—Ö #####

@dp.my_chat_member_handler()
async def _(my_chat_member: types.ChatMemberUpdated):
	if not db.chat_exists(my_chat_member.chat.id):
		db.add_chat(my_chat_member.chat.id)
	if not os.path.isfile(f'./chats/{my_chat_member.chat.id}.txt'):
		with open(f'./chats/{my_chat_member.chat.id}.txt', 'w') as f:
			pass
	group_id = await bot.get_me()
	if my_chat_member.new_chat_member.user.id == group_id.id:
		if my_chat_member.new_chat_member.status == 'member' and my_chat_member.old_chat_member.status == 'left':
			await bot.send_message(my_chat_member.chat.id, 'üôè–°–ø–∞—Å–∏–±–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–µ—Å–µ–¥—É\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/dnevnik"\n\n‚ö†Ô∏è–õ—é–±–æ–π, —É –∫–æ–≥–æ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ, –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥—Ä–æ–±–Ω–µ–µ: –Ω–∞–ø–∏—à–∏—Ç–µ "/connect" –≤ –õ–° –±–æ—Ç–∞')

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), commands=['dnevnik'])
async def _(message: types.Message):
	await message.answer('https://telegra.ph/Spravka-po-ispolzovaniyu-bota-v-besede-09-23')

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), commands=['dz'])
async def _(message: types.Message):
	await message.answer('https://telegra.ph/Spravka-po-dobavleniyu-kastomnogo-DZ-08-22')

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), commands=['connect'])
async def _(message: types.Message):
	account_id = int(message.text.split(' ')[1])
	if not db.account_exists(account_id):
		await message.answer('‚ùå–ù–µ –Ω–∞—à–µ–ª —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —É —Å–µ–±—è –≤ –±–∞–∑–µ')
		return
	if db.user_exists(message.from_user.id):
		if not account_id in db.get_account_user(message.from_user.id):
			await message.answer('‚ùå–í–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç')
			return
	if db.get_account_id_chat(message.chat.id):
		await message.answer('‚ùå–ö –±–µ—Å–µ–¥–µ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç')
		return
	db.edit_account_id_chat(message.chat.id, account_id)
	await message.answer('‚úÖ–ü–æ–¥–∫–ª—é—á–∏–ª –∞–∫–∫–∞—É–Ω—Ç –∫ –±–µ—Å–µ–¥–µ!–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞(–∫—Ä–æ–º–µ –æ—Ü–µ–Ω–æ–∫)!', reply_markup = keyboard_chat)

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), commands=['disconnect'])
async def _(message: types.Message):
	admins = await bot.get_chat_administrators(message.chat.id)
	for admin in admins:
		if admin['user']['id'] == message.from_user.id:
			db.edit_account_id_chat(message.chat.id)
			await message.answer('‚úÖ–û—Ç–∫–ª—é—á–∏–ª –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –±–µ—Å–µ–¥—ã')
			return
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id_chat(message.chat.id)
		if account_id in db.get_account_user(message.from_user.id):
			db.edit_account_id_chat(message.chat.id)
			await message.answer('‚úÖ–û—Ç–∫–ª—é—á–∏–ª –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –±–µ—Å–µ–¥—ã')
			return
	await message.answer('‚ùå–í—ã –Ω–µ –∞–¥–º–∏–Ω –∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç')

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), Text(ignore_case=True, equals=['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—á–µ—Ä–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—è']))
async def _(message: types.Message):
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id(message.from_user.id)
	else:
		account_id = db.get_account_id_chat(message.chat.id)
	if not account_id:
		await message.answer('‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –∏ –∫ —á–∞—Ç—É –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!', reply_markup = keyboard_chat)
		return
	account = db.get_account(account_id)
	start = end = datetime.date.today()
	if len(message.text.split(' ')) > 1:
		date = message.text.split(' ')[1]
		if date == '–∑–∞–≤—Ç—Ä–∞':
			start = end = datetime.date.today() + datetime.timedelta(days=1)
		elif date == '–≤—á–µ—Ä–∞':
			start = end = datetime.date.today() + datetime.timedelta(days=-1)
		elif date == '–Ω–µ–¥–µ–ª—è':
			start = end = None
	result = await get_rasp(account[1], account[2], account[3], account[4], start, end)
	await message.answer(result, reply_markup=keyboard_chat)

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), Text(ignore_case=True, equals=['–¥–∑', '–¥–∑ –∑–∞–≤—Ç—Ä–∞', '–¥–∑ –≤—á–µ—Ä–∞', '–¥–∑ –Ω–µ–¥–µ–ª—è']))
async def _(message: types.Message):
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id(message.from_user.id)
	else:
		account_id = db.get_account_id_chat(message.chat.id)
	if not account_id:
		await message.answer('‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –∏ –∫ —á–∞—Ç—É –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!', reply_markup = keyboard_chat)
		return
	account = db.get_account(account_id)
	start = end = datetime.date.today()
	if len(message.text.split(' ')) > 1:
		date = message.text.split(' ')[1]
		if date == '–∑–∞–≤—Ç—Ä–∞':
			start = end = datetime.date.today() + datetime.timedelta(days=1)
		elif date == '–≤—á–µ—Ä–∞':
			start = end = datetime.date.today() + datetime.timedelta(days=-1)
		elif date == '–Ω–µ–¥–µ–ª—è':
			start = end = None
	result = await get_dz(account[1], account[2], account[3], account[4], start, end)
	with open(f'./chats/{message.chat.id}.txt', encoding='utf-8') as f:
		text = f.read()
	if text:
		result += '\n\nüóí–ò–∑ –∑–∞–º–µ—Ç–æ–∫:\n' + text
	await message.answer(result, reply_markup=keyboard_chat)

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), Text(ignore_case=True, equals=['–æ—Ü–µ–Ω–∫–∏']))
async def _(message: types.Message):
	account_id = 0
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id(message.from_user.id)
	if not account_id:
		await message.answer('‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
		return
	account = db.get_account(account_id)
	result = await get_marks(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await bot.send_message(message.from_user.id, result[x:x+4096])
		await bot.send_message(message.from_user.id, '‚úÖ–í—Å—ë!')
	else:
		await bot.send_message(message.from_user.id, result)
	await message.answer('‚úÖ–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫–∏ –≤–∞–º –≤ –õ–°!', reply_markup=keyboard_chat)

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), Text(ignore_case=True, equals=['–¥–æ—Ü–µ–Ω–∫–∏']))
async def _(message: types.Message):
	account_id = 0
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id(message.from_user.id)
	if not account_id:
		await message.answer('‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
		return
	account = db.get_account(account_id)
	result = await get_detail_marks(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await bot.send_message(message.from_user.id, result[x:x+4096])
		await bot.send_message(message.from_user.id, '‚úÖ–í—Å—ë!')
	else:
		await bot.send_message(message.from_user.id, result)
	await message.answer('‚úÖ–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫–∏ –≤–∞–º –≤ –õ–°!', reply_markup=keyboard_chat)

@dp.message_handler(ChatTypeFilter(['group', 'supergroup']), Text(ignore_case=True, equals=['–∑–≤–æ–Ω–∫–∏']))
async def _(message: types.Message):
	calls = db.get_calls(message.chat.id)
	if not calls:
		calls = '‚ùå–í –±–µ—Å–µ–¥–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤'
	await message.answer(calls, reply_markup = keyboard_chat)

@dp.callback_query_handler(text='rasp_chat')
async def _(message: types.CallbackQuery):
	await message.answer()
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id(message.from_user.id)
	else:
		account_id = db.get_account_id_chat(message.message.chat.id)
	if not account_id:
		await message.answer('‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –∏ –∫ —á–∞—Ç—É –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!', reply_markup = keyboard_chat)
		return
	account = db.get_account(account_id)
	start = end = datetime.date.today()
	result = await get_rasp(account[1], account[2], account[3], account[4], start, end)
	await message.message.answer(result, reply_markup=keyboard_chat)

@dp.callback_query_handler(text='dz_chat')
async def _(message: types.CallbackQuery):
	await message.answer()
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id(message.from_user.id)
	else:
		account_id = db.get_account_id_chat(message.message.chat.id)
	if not account_id:
		await message.answer('‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –∏ –∫ —á–∞—Ç—É –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!', reply_markup = keyboard_chat)
		return
	account = db.get_account(account_id)
	start = end = datetime.date.today()
	result = await get_dz(account[1], account[2], account[3], account[4], start, end)
	with open(f'./chats/{message.message.chat.id}.txt', encoding='utf-8') as f:
		text = f.read()
	if text:
		result += '\n\nüóí–ò–∑ –∑–∞–º–µ—Ç–æ–∫:\n' + text
	await message.message.answer(result, reply_markup=keyboard_chat)

@dp.callback_query_handler(text='marks_chat')
async def _(message: types.CallbackQuery):
	await message.answer()
	account_id = 0
	if db.user_exists(message.from_user.id):
		account_id = db.get_account_id(message.from_user.id)
	if not account_id:
		await message.answer('‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
		return
	account = db.get_account(account_id)
	result = await get_marks(account[1], account[2], account[3], account[4])
	if len(result) > 4096:
		for x in range(0, len(result), 4096):
			await bot.send_message(message.from_user.id, result[x:x+4096])
		await bot.send_message(message.from_user.id, '‚úÖ–í—Å—ë!')
	else:
		await bot.send_message(message.from_user.id, result)
	await message.message.answer('‚úÖ–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫–∏ –≤–∞–º –≤ –õ–°!', reply_markup=keyboard_marks)

@dp.callback_query_handler(text='calls_chat')
async def _(message: types.CallbackQuery):
	await message.answer()
	calls = db.get_calls(message.message.chat.id)
	if not calls:
		calls = '‚ùå–í –±–µ—Å–µ–¥–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤'
	await message.message.answer(calls, reply_markup = keyboard_chat)

##### –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –¥–∑ –∏ –∑–≤–æ–Ω–∫–∞–º–∏ #####

@dp.message_handler(Text(startswith='/calledit'), is_chat_admin=True)
async def _(message: types.Message):
	calls = ''
	if message.text[9:]:
		calls = message.text[9:]
	db.edit_calls(message.chat.id, calls)
	await message.answer('‚úÖ–£—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤', reply_markup=keyboard_chat)
	return
	
@dp.message_handler(Text(startswith='/addmoder'), is_chat_admin=True)
async def _(message: types.Message):
	if not message.text[10:]:
		await message.answer('‚ùå–£–∫–∞–∂–∏—Ç–µ ID')
		return
	db.add_moder(message.chat.id, int(message.text[10:]))
	await message.answer('‚úÖ–î–æ–±–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')

@dp.message_handler(Text(startswith='/delmoder'), is_chat_admin=True)
async def _(message: types.Message):
	if not message.text[10:]:
		await message.answer('‚ùå–£–∫–∞–∂–∏—Ç–µ ID')
		return
	db.del_moder(message.chat.id, int(message.text[10:]))
	await message.answer('‚úÖ–£–¥–∞–ª–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')

@dp.message_handler(text='/moders', is_chat_admin=True)
async def _(message: types.Message):
	result = '–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞ –±–µ—Å–µ–¥—ã:'
	for moder in db.get_moders(message.chat.id):
		try:
			user = (await bot.get_chat_member(message.chat.id, moder)).user
			result += f'\n@{user.username}'
		except Exception:
			pass
	await message.answer(result)

@dp.message_handler(Text(startswith='/dzadd'))
async def _(message: types.Message):
	dz = message.text[7:]
	if not dz:
		await message.answer('‚ùå–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —á—Ç–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å')
		return
	admin = False
	admins = await bot.get_chat_administrators(message.chat.id)
	for admin in admins:
		if admin['user']['id'] == message.from_user.id:
			admin = True
	if message.from_user.id in db.get_moders(message.chat.id):
		admin = True
	if admin:
		with open(f'./chats/{message.chat.id}.txt', 'a') as f:
			f.write(f'{dz}\n')
		await message.answer('‚úÖ–ì–æ—Ç–æ–≤–æ')
	else:
		await message.answer('‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')

@dp.message_handler(Text(startswith='/dzdel'))
async def _(message: types.Message):
	admin = False
	admins = await bot.get_chat_administrators(message.chat.id)
	for admin in admins:
		if admin['user']['id'] == message.from_user.id:
			admin = True
	if message.from_user.id in db.get_moders(message.chat.id):
		admin = True
	if admin:
		dz = message.text.split(' ')
		if not len(dz) > 1:
			with open(f'./chats/{message.chat.id}.txt', 'w') as f:
				pass
		else:
			with open(f'./chats/{message.chat.id}.txt') as f:
				lines = f.readlines()
			with open(f'./chats/{message.chat.id}.txt', 'w') as f:
				for line in lines:
					if not line.split(':')[0].lower() == dz[1].split(':')[0].lower():
						f.write(line)
		await message.answer('‚úÖ–ì–æ—Ç–æ–≤–æ')

@dp.message_handler(Text(startswith='/dzred'))
async def _(message: types.Message):
	admin = False
	admins = await bot.get_chat_administrators(message.chat.id)
	for admin in admins:
		if admin['user']['id'] == message.from_user.id:
			admin = True
	if message.from_user.id in db.get_moders(message.chat.id):
		admin = True
	if admin:
		dz = message.text[7:]
		if not dz:
			await message.answer('‚ùå–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –î–ó')
			return
		predmet = dz.split(':')[0]
		dz = dz.split(':')[1]
		with open(f'./chats/{message.chat.id}.txt') as f:
			lines = f.readlines()
		with open(f'./chats/{message.chat.id}.txt', 'w') as f:
			for line in lines:
				if line.split(':')[0].lower() == predmet.lower():
					line = predmet + ':' + dz + '\n'
				f.write(line)
		await message.answer('‚úÖ–ì–æ—Ç–æ–≤–æ')

##### –û—Å—Ç–∞–ª—å–Ω–æ–µ #####

@dp.message_handler(state='Other:action')
async def _(message: types.Message, state: FSMContext):
	await message.answer('‚úÖ–ó–∞–ø—É—Å–∫–∞—é')
	await state.finish()
	account_id = db.get_account_id(message.from_user.id)
	account = db.get_account(account_id)
	await floodLogin(account[1], account[2], account[3], account[4], int(message.text))
	await message.answer('‚òëÔ∏è–ó–∞–∫–æ–Ω—á–∏–ª —Ñ–ª—É–¥')

async def send_notiifcation(dp: Dispatcher):
	users = db.get_notification_users()
	for user in users:
		try:
			if user[1]:
				account = db.get_account(user[1])	
				marks, result = await getNotify(account[1], account[2], account[3], account[4], account[5])
				db.edit_marks(user[1], marks)
				for mark in result:
					await dp.bot.send_message(user[0], mark)
				logging.info(f'Send {user[0]} notify')			
		except Exception as e:
			logging.warning(f'Error send {user[0]} notify: {e}')

def notiication():
	scheduler.add_job(send_notiifcation, "interval", minutes=5, args=(dp,))

async def on_startup(dp):
	notiication()

scheduler.start()
executor.start_polling(dp, on_startup=on_startup)